// <auto-generated />
using System;
using BookDAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookDAL.Migrations
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookDAL.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Edgar",
                            SerName = "Elen"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Valter",
                            SerName = "Scot"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gein",
                            SerName = "Ostin"
                        });
                });

            modelBuilder.Entity("BookDAL.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("TimeAccepted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeGiveAway")
                        .HasColumnType("datetime2")
                        .HasColumnName("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Description = "Каждая женщина мечтает выйти замуж по любви. Однако далеко не всегда такие мечты сбываются. Очень часто это связано с материальным положением невесты, которая из-за бедности может выйти замуж за нелюбимого человека, обладающего богатством и статусом.",
                            GenreId = 1,
                            IBAN = "BY NBRB 123456",
                            ISBN = "5-237-01064-1",
                            Name = "Ребекка"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Description = "У меня был четкий план: помолвка с влиятельным лордом и блистательное возвращение ко двору. Восстановить былую славу и влияние рода Ньер, завязать нужные знакомства и сбросить с себя клеймо неудачников. Все это полетело в Бездну, не успев начаться. Поцелуй с незнакомцем, нападение лесных разбойников. И вот я уже не леди, а пленница",
                            GenreId = 1,
                            IBAN = "BY NBRB 123456",
                            ISBN = "5-237-01064-2",
                            Name = "Шарлота"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Description = "Время Англии 11 века по-своему притягательно: тут и рыцарские турниры, и крестовые походы, и благородные разбойники, и прекрасные дамы. Те, кому нравится читать об этой эпохе, не смогут пройти мимо великолепного романа Вальтера Скотта «Айвенго», который принес писателю мировую славу",
                            GenreId = 5,
                            IBAN = "BY NBRB 123456",
                            ISBN = "5-237-01064-3",
                            Name = "Айвенго"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            Description = "Готический ужас и тайна составляют основу содержания книги известного английского исследователя Питера Хэйнинга. Потусторонний мир очаровывает своими видениями: демонические силы и посещения со злой целью;",
                            GenreId = 5,
                            IBAN = "BY NBRB 123456",
                            ISBN = "5-237-01064-4",
                            Name = "Комната с призраком"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            Description = "Джейн Остин, в которых она, молодая девушка, еще только ищет свой стиль, - Собрание писем и самая ироничная на свете История Англии,",
                            GenreId = 2,
                            IBAN = "BY NBRB 123456",
                            ISBN = "5-237-01064-5",
                            Name = "Уотсоны"
                        });
                });

            modelBuilder.Entity("BookDAL.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Adventure"
                        });
                });

            modelBuilder.Entity("BookDAL.Models.Book", b =>
                {
                    b.HasOne("BookDAL.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BookDAL.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookDAL.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookDAL.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
